name: CI-CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: thecatapi-async
  REGISTRY: ghcr.io
  JAVA_VERSION: '21'

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Build & Test (Maven)
        run: mvn -B -DskipTests=false clean verify

      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*-SNAPSHOT.jar

  docker-publish:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # necessário para GHCR
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Docker meta (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-ec2:
    needs: docker-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Gera .env de produção para o compose no EC2
      - name: Render .env.prod
        run: |
          cat > .env.prod <<'EOF'
          SPRING_PROFILES_ACTIVE=prod
          DB_URL=${{ secrets.DB_URL_PROD }}
          DB_USER=${{ secrets.DB_USER_PROD }}
          DB_PASS=${{ secrets.DB_PASS_PROD }}
          CAT_API_BASE=https://api.thecatapi.com/v1
          CAT_API_KEY=${{ secrets.CAT_API_KEY_PROD }}
          RABBIT_HOST=${{ secrets.RABBIT_HOST_PROD }}
          MAIL_HOST=${{ secrets.MAIL_HOST_PROD }}
          MAIL_PORT=${{ secrets.MAIL_PORT_PROD }}
          MAIL_FROM=${{ secrets.MAIL_FROM_PROD }}
          EOF

      # Envia docker-compose.yml e .env.prod pro servidor
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,.env.prod"
          target: "~/app"

      # Executa o deploy remoto
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/app
            # Ajusta o compose para usar seu namespace do GHCR
            sed -i 's#ghcr.io/SEU_USER/thecatapi-async#ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}#g' docker-compose.yml

            # Login no GHCR para o pull da imagem
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Carrega variáveis
            export $(grep -v '^#' .env.prod | xargs)

            # Sobe/atualiza serviços
            docker compose pull app || true
            docker compose up -d --remove-orphans

            # Limpeza
            docker image prune -f
